{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> **Tip**: Welcome to the Investigate a Dataset project! You will find tips in quoted sections like this to help organize your approach to your investigation. Before submitting your project, it will be a good idea to go back through your report and remove these sections to make the presentation of your work as tidy as possible. First things first, you might want to double-click this Markdown cell and change the title so that it reflects your dataset and investigation.\n",
    "\n",
    "# Project: Investigate a Dataset (Patient appointments)\n",
    "\n",
    "## Table of Contents\n",
    "<ul>\n",
    "<li><a href=\"#intro\">Introduction</a></li>\n",
    "<li><a href=\"#wrangling\">Data Wrangling</a></li>\n",
    "<li><a href=\"#eda\">Exploratory Data Analysis</a></li>\n",
    "<li><a href=\"#conclusions\">Conclusions</a></li>\n",
    "</ul>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='intro'></a>\n",
    "## Introduction\n",
    "\n",
    "> **Tip**: In this section of the report, provide a brief introduction to the dataset you've selected for analysis. At the end of this section, describe the questions that you plan on exploring over the course of the report. Try to build your report around the analysis of at least one dependent variable and three independent variables. If you're not sure what questions to ask, then make sure you familiarize yourself with the dataset, its variables and the dataset context for ideas of what to explore.\n",
    "\n",
    "> If you haven't yet selected and downloaded your data, make sure you do that first before coming back here. In order to work with the data in this workspace, you also need to upload it to the workspace. To do so, click on the jupyter icon in the upper left to be taken back to the workspace directory. There should be an 'Upload' button in the upper right that will let you add your data file(s) to the workspace. You can then click on the .ipynb file name to come back here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use this cell to set up import statements for all of the packages that you\n",
    "#   plan to use.\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib as plt\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Remember to include a 'magic word' so that your visualizations are plotted\n",
    "#   inline with the notebook. See this page for more:\n",
    "#   http://ipython.readthedocs.io/en/stable/interactive/magics.html\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='wrangling'></a>\n",
    "## Data Wrangling\n",
    "\n",
    "> **Tip**: In this section of the report, you will load in the data, check for cleanliness, and then trim and clean your dataset for analysis. Make sure that you document your steps carefully and justify your cleaning decisions.\n",
    "\n",
    "### General Properties"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PatientId</th>\n",
       "      <th>AppointmentID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>ScheduledDay</th>\n",
       "      <th>AppointmentDay</th>\n",
       "      <th>Age</th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Scholarship</th>\n",
       "      <th>Hipertension</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Alcoholism</th>\n",
       "      <th>Handcap</th>\n",
       "      <th>SMS_received</th>\n",
       "      <th>No-show</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.987250e+13</td>\n",
       "      <td>5642903</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T18:38:08Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>62</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.589978e+14</td>\n",
       "      <td>5642503</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-04-29T16:08:27Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>56</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.262962e+12</td>\n",
       "      <td>5642549</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T16:19:04Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>62</td>\n",
       "      <td>MATA DA PRAIA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.679512e+11</td>\n",
       "      <td>5642828</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T17:29:31Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>8</td>\n",
       "      <td>PONTAL DE CAMBURI</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.841186e+12</td>\n",
       "      <td>5642494</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T16:07:23Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>56</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      PatientId  AppointmentID Gender          ScheduledDay  \\\n",
       "0  2.987250e+13        5642903      F  2016-04-29T18:38:08Z   \n",
       "1  5.589978e+14        5642503      M  2016-04-29T16:08:27Z   \n",
       "2  4.262962e+12        5642549      F  2016-04-29T16:19:04Z   \n",
       "3  8.679512e+11        5642828      F  2016-04-29T17:29:31Z   \n",
       "4  8.841186e+12        5642494      F  2016-04-29T16:07:23Z   \n",
       "\n",
       "         AppointmentDay  Age      Neighbourhood  Scholarship  Hipertension  \\\n",
       "0  2016-04-29T00:00:00Z   62    JARDIM DA PENHA            0             1   \n",
       "1  2016-04-29T00:00:00Z   56    JARDIM DA PENHA            0             0   \n",
       "2  2016-04-29T00:00:00Z   62      MATA DA PRAIA            0             0   \n",
       "3  2016-04-29T00:00:00Z    8  PONTAL DE CAMBURI            0             0   \n",
       "4  2016-04-29T00:00:00Z   56    JARDIM DA PENHA            0             1   \n",
       "\n",
       "   Diabetes  Alcoholism  Handcap  SMS_received No-show  \n",
       "0         0           0        0             0      No  \n",
       "1         0           0        0             0      No  \n",
       "2         0           0        0             0      No  \n",
       "3         0           0        0             0      No  \n",
       "4         1           0        0             0      No  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load your data and print out a few lines. Perform operations to inspect data\n",
    "#   types and look for instances of missing or possibly errant data.\n",
    "hos=pd.read_csv(\"KaggleV2-May-2016.csv\")\n",
    "hos.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PatientId</th>\n",
       "      <th>AppointmentID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Scholarship</th>\n",
       "      <th>Hipertension</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Alcoholism</th>\n",
       "      <th>Handcap</th>\n",
       "      <th>SMS_received</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.105270e+05</td>\n",
       "      <td>1.105270e+05</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.474963e+14</td>\n",
       "      <td>5.675305e+06</td>\n",
       "      <td>37.088874</td>\n",
       "      <td>0.098266</td>\n",
       "      <td>0.197246</td>\n",
       "      <td>0.071865</td>\n",
       "      <td>0.030400</td>\n",
       "      <td>0.022248</td>\n",
       "      <td>0.321026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.560949e+14</td>\n",
       "      <td>7.129575e+04</td>\n",
       "      <td>23.110205</td>\n",
       "      <td>0.297675</td>\n",
       "      <td>0.397921</td>\n",
       "      <td>0.258265</td>\n",
       "      <td>0.171686</td>\n",
       "      <td>0.161543</td>\n",
       "      <td>0.466873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>3.921784e+04</td>\n",
       "      <td>5.030230e+06</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4.172614e+12</td>\n",
       "      <td>5.640286e+06</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.173184e+13</td>\n",
       "      <td>5.680573e+06</td>\n",
       "      <td>37.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>9.439172e+13</td>\n",
       "      <td>5.725524e+06</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>9.999816e+14</td>\n",
       "      <td>5.790484e+06</td>\n",
       "      <td>115.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          PatientId  AppointmentID            Age    Scholarship  \\\n",
       "count  1.105270e+05   1.105270e+05  110527.000000  110527.000000   \n",
       "mean   1.474963e+14   5.675305e+06      37.088874       0.098266   \n",
       "std    2.560949e+14   7.129575e+04      23.110205       0.297675   \n",
       "min    3.921784e+04   5.030230e+06      -1.000000       0.000000   \n",
       "25%    4.172614e+12   5.640286e+06      18.000000       0.000000   \n",
       "50%    3.173184e+13   5.680573e+06      37.000000       0.000000   \n",
       "75%    9.439172e+13   5.725524e+06      55.000000       0.000000   \n",
       "max    9.999816e+14   5.790484e+06     115.000000       1.000000   \n",
       "\n",
       "        Hipertension       Diabetes     Alcoholism        Handcap  \\\n",
       "count  110527.000000  110527.000000  110527.000000  110527.000000   \n",
       "mean        0.197246       0.071865       0.030400       0.022248   \n",
       "std         0.397921       0.258265       0.171686       0.161543   \n",
       "min         0.000000       0.000000       0.000000       0.000000   \n",
       "25%         0.000000       0.000000       0.000000       0.000000   \n",
       "50%         0.000000       0.000000       0.000000       0.000000   \n",
       "75%         0.000000       0.000000       0.000000       0.000000   \n",
       "max         1.000000       1.000000       1.000000       4.000000   \n",
       "\n",
       "        SMS_received  \n",
       "count  110527.000000  \n",
       "mean        0.321026  \n",
       "std         0.466873  \n",
       "min         0.000000  \n",
       "25%         0.000000  \n",
       "50%         0.000000  \n",
       "75%         1.000000  \n",
       "max         1.000000  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#show the description of hos (summary statistics)\n",
    "hos.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 110527 entries, 0 to 110526\n",
      "Data columns (total 14 columns):\n",
      "PatientId         110527 non-null float64\n",
      "AppointmentID     110527 non-null int64\n",
      "Gender            110527 non-null object\n",
      "ScheduledDay      110527 non-null object\n",
      "AppointmentDay    110527 non-null object\n",
      "Age               110527 non-null int64\n",
      "Neighbourhood     110527 non-null object\n",
      "Scholarship       110527 non-null int64\n",
      "Hipertension      110527 non-null int64\n",
      "Diabetes          110527 non-null int64\n",
      "Alcoholism        110527 non-null int64\n",
      "Handcap           110527 non-null int64\n",
      "SMS_received      110527 non-null int64\n",
      "No-show           110527 non-null object\n",
      "dtypes: float64(1), int64(8), object(5)\n",
      "memory usage: 11.8+ MB\n"
     ]
    }
   ],
   "source": [
    "#print the information of hos data frame - notice:no missing data \n",
    "hos.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PatientId          62299\n",
       "AppointmentID     110527\n",
       "Gender                 2\n",
       "ScheduledDay      103549\n",
       "AppointmentDay        27\n",
       "Age                  104\n",
       "Neighbourhood         81\n",
       "Scholarship            2\n",
       "Hipertension           2\n",
       "Diabetes               2\n",
       "Alcoholism             2\n",
       "Handcap                5\n",
       "SMS_received           2\n",
       "No-show                2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# display the unique values\n",
    "hos.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PatientId         float64\n",
       "AppointmentID       int64\n",
       "Gender             object\n",
       "ScheduledDay       object\n",
       "AppointmentDay     object\n",
       "Age                 int64\n",
       "Neighbourhood      object\n",
       "Scholarship         int64\n",
       "Hipertension        int64\n",
       "Diabetes            int64\n",
       "Alcoholism          int64\n",
       "Handcap             int64\n",
       "SMS_received        int64\n",
       "No-show            object\n",
       "dtype: object"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hos.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(110527, 14)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#print the shapd of the data frame hos\n",
    "hos.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "JARDIM CAMBURI                 7717\n",
       "MARIA ORTIZ                    5805\n",
       "RESISTÊNCIA                    4431\n",
       "JARDIM DA PENHA                3877\n",
       "ITARARÉ                        3514\n",
       "CENTRO                         3334\n",
       "TABUAZEIRO                     3132\n",
       "SANTA MARTHA                   3131\n",
       "JESUS DE NAZARETH              2853\n",
       "BONFIM                         2773\n",
       "SANTO ANTÔNIO                  2746\n",
       "SANTO ANDRÉ                    2571\n",
       "CARATOÍRA                      2565\n",
       "JABOUR                         2509\n",
       "SÃO PEDRO                      2448\n",
       "ILHA DO PRÍNCIPE               2266\n",
       "NOVA PALESTINA                 2264\n",
       "ANDORINHAS                     2262\n",
       "DA PENHA                       2217\n",
       "ROMÃO                          2215\n",
       "GURIGICA                       2018\n",
       "SÃO JOSÉ                       1977\n",
       "BELA VISTA                     1907\n",
       "MARUÍPE                        1902\n",
       "FORTE SÃO JOÃO                 1889\n",
       "ILHA DE SANTA MARIA            1885\n",
       "SÃO CRISTÓVÃO                  1836\n",
       "REDENÇÃO                       1553\n",
       "SÃO BENEDITO                   1439\n",
       "JOANA D´ARC                    1427\n",
       "                               ... \n",
       "SANTOS REIS                     547\n",
       "ESTRELINHA                      538\n",
       "SANTA CLARA                     506\n",
       "SOLON BORGES                    469\n",
       "PIEDADE                         452\n",
       "SANTA CECÍLIA                   448\n",
       "SANTA LÚCIA                     438\n",
       "SANTA LUÍZA                     428\n",
       "BARRO VERMELHO                  423\n",
       "DO MOSCOSO                      413\n",
       "MÁRIO CYPRESTE                  371\n",
       "BOA VISTA                       312\n",
       "COMDUSA                         310\n",
       "DE LOURDES                      305\n",
       "ARIOVALDO FAVALESSA             282\n",
       "ANTÔNIO HONÓRIO                 271\n",
       "FRADINHOS                       258\n",
       "ENSEADA DO SUÁ                  235\n",
       "SANTA HELENA                    178\n",
       "HORTO                           175\n",
       "UNIVERSITÁRIO                   152\n",
       "SEGURANÇA DO LAR                145\n",
       "NAZARETH                        135\n",
       "MORADA DE CAMBURI                96\n",
       "PONTAL DE CAMBURI                69\n",
       "ILHA DO BOI                      35\n",
       "ILHA DO FRADE                    10\n",
       "AEROPORTO                         8\n",
       "ILHAS OCEÂNICAS DE TRINDADE       2\n",
       "PARQUE INDUSTRIAL                 1\n",
       "Name: Neighbourhood, Length: 81, dtype: int64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#display the value counts\n",
    "hos.get(\"Neighbourhood\").value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "hos.hist(figsize=(15,15))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> **Tip**: You should _not_ perform too many operations in each cell. Create cells freely to explore your data. One option that you can take with this project is to do a lot of explorations in an initial notebook. These don't have to be organized, but make sure you use enough comments to understand the purpose of each code cell. Then, after you're done with your analysis, create a duplicate notebook where you will trim the excess and organize your steps so that you have a flowing, cohesive report.\n",
    "\n",
    "> **Tip**: Make sure that you keep your reader informed on the steps that you are taking in your investigation. Follow every code cell, or every set of related code cells, with a markdown cell to describe to the reader what was found in the preceding cell(s). Try to make it so that the reader can then understand what they will be seeing in the following cell(s).\n",
    "\n",
    "### Data Cleaning (Replace this with more specific notes!)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 110527 entries, 0 to 110526\n",
      "Data columns (total 14 columns):\n",
      "PatientId         110527 non-null float64\n",
      "AppointmentID     110527 non-null int64\n",
      "Gender            110527 non-null object\n",
      "ScheduledDay      110527 non-null object\n",
      "AppointmentDay    110527 non-null object\n",
      "Age               110527 non-null int64\n",
      "Neighbourhood     110527 non-null object\n",
      "Scholarship       110527 non-null int64\n",
      "Hipertension      110527 non-null int64\n",
      "Diabetes          110527 non-null int64\n",
      "Alcoholism        110527 non-null int64\n",
      "Handcap           110527 non-null int64\n",
      "SMS_received      110527 non-null int64\n",
      "No-show           110527 non-null object\n",
      "dtypes: float64(1), int64(8), object(5)\n",
      "memory usage: 11.8+ MB\n"
     ]
    }
   ],
   "source": [
    "# the type befor changing it \n",
    "hos.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### changing the types for #AppointmentDay and #ScheduledDay #PatientId\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#change the data type of AppointmentDay and ScheduledDay to be as data \n",
    "hos['AppointmentDay']=pd.to_datetime(hos['AppointmentDay'])\n",
    "hos['ScheduledDay']=pd.to_datetime(hos['ScheduledDay'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "#changaing the type for the PatientId into int\n",
    "hos['PatientId']=hos.PatientId.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 110527 entries, 0 to 110526\n",
      "Data columns (total 14 columns):\n",
      "PatientId         110527 non-null int64\n",
      "AppointmentID     110527 non-null int64\n",
      "Gender            110527 non-null object\n",
      "ScheduledDay      110527 non-null datetime64[ns]\n",
      "AppointmentDay    110527 non-null datetime64[ns]\n",
      "Age               110527 non-null int64\n",
      "Neighbourhood     110527 non-null object\n",
      "Scholarship       110527 non-null int64\n",
      "Hipertension      110527 non-null int64\n",
      "Diabetes          110527 non-null int64\n",
      "Alcoholism        110527 non-null int64\n",
      "Handcap           110527 non-null int64\n",
      "SMS_received      110527 non-null int64\n",
      "No-show           110527 non-null object\n",
      "dtypes: datetime64[ns](2), int64(9), object(3)\n",
      "memory usage: 11.8+ MB\n"
     ]
    }
   ],
   "source": [
    "hos.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='eda'></a>\n",
    "## Exploratory Data Analysis\n",
    "\n",
    "> **Tip**: Now that you've trimmed and cleaned your data, you're ready to move on to exploration. Compute statistics and create visualizations with the goal of addressing the research questions that you posed in the Introduction section. It is recommended that you be systematic with your approach. Look at one variable at a time, and then follow it up by looking at relationships between variables.\n",
    "\n",
    "### Research Question 1 ( in % how many people hwo attnede or missed the appointments?   )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "No     88208\n",
       "Yes    22319\n",
       "Name: No-show, dtype: int64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#i need to now the numbers of the the vlues and how many repted \n",
    "hos[\"No-show\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#count the values for non shows \n",
    "noMask=hos[hos[\"No-show\"]=='No']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [],
   "source": [
    "#count for who showed at appiontment\n",
    "yesMask=hos[hos[\"No-show\"]=='Yes']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "79.8067440534892"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#the percentage of peopel who attened the appointments  \n",
    "noMask[\"PatientId\"].count()/hos[\"PatientId\"].count()*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20.193255946510806"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#the percentage of peopel who not attened the appointments  \n",
    "yesMask[\"PatientId\"].count()/hos[\"PatientId\"].count()*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot the percentage of the attending &not attending \n",
    "labels = 'not attened', 'attened'\n",
    "sizes = [yesMask[\"PatientId\"].count()/hos[\"PatientId\"].count()*100, noMask[\"PatientId\"].count()/hos[\"PatientId\"].count()*100]\n",
    "colors = ['red', 'green']\n",
    "explode = (0.1, 0)  \n",
    "plt.pie(sizes, explode=explode, labels=labels, colors=colors,\n",
    "autopct='%1.1f%%', shadow=True, startangle=140)\n",
    " \n",
    "plt.axis('equal')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Research Question 2  (Who missed the appointments more womwn or mans ?)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "57246"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# the number of femal who attending the appointments\n",
    "len(noMask.loc[noMask['Gender'] == \"F\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30962"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# the number of femal who attending the appointments\n",
    "len(noMask.loc[noMask['Gender'] == \"M\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "female = (len(noMask.loc[noMask['Gender'] == \"F\"]),len(yesMask.loc[yesMask['Gender'] == \"F\"]))\n",
    "male = (len(noMask.loc[noMask['Gender'] == \"M\"]),len(yesMask.loc[yesMask['Gender'] == \"M\"]))\n",
    " \n",
    "fig, ax = plt.subplots()\n",
    "index = np.arange(2)\n",
    "bar_width = 0.40\n",
    "opacity = 0.9\n",
    "plt.xticks(index + bar_width, ('F', 'M')) \n",
    "bar1 = plt.bar(index, female , bar_width,\n",
    "alpha=opacity,\n",
    "align='edge',\n",
    "edgecolor=\"k\",\n",
    "color='yellowgreen',\n",
    "label='They attended the appointments  ')\n",
    " \n",
    "bar2 = plt.bar(index + bar_width, male , bar_width,\n",
    "alpha=opacity,\n",
    "align='edge',\n",
    "edgecolor=\"k\",\n",
    "color='lightcoral',\n",
    "label='They missed the appointments ')\n",
    " \n",
    "plt.xlabel('The Gender ')\n",
    "plt.ylabel('Count')\n",
    "plt.title('show and not show for the Gender ')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='conclusions'></a>\n",
    "## Conclusions\n",
    "\n",
    "20% only who miised thire appointments on the other hand more that 70% attendeing there appointment \n",
    "the megrety of who mising there appiontment are womans \n",
    "\n",
    "\n",
    "\n",
    "## Submitting your Project \n",
    "\n",
    "> Before you submit your project, you need to create a .html or .pdf version of this notebook in the workspace here. To do that, run the code cell below. If it worked correctly, you should get a return code of 0, and you should see the generated .html file in the workspace directory (click on the orange Jupyter icon in the upper left).\n",
    "\n",
    "> Alternatively, you can download this report as .html via the **File** > **Download as** submenu, and then manually upload it into the workspace directory by clicking on the orange Jupyter icon in the upper left, then using the Upload button.\n",
    "\n",
    "> Once you've done this, you can submit your project by clicking on the \"Submit Project\" button in the lower right here. This will create and submit a zip file with this .ipynb doc and the .html or .pdf version you created. Congratulations!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from subprocess import call\n",
    "call(['python', '-m', 'nbconvert', 'Investigate_a_Dataset.ipynb'])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
